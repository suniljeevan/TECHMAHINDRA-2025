Techmahindra 
---------------
Backend
---------



1. Java acts as a middle Layer engine?

2. Front end-> backend
3. Database - mysql, mongodb, redis
4. API ( Restful )/ end points
    (HTTP methods)
5. API Testing  - Postman
6. Web engine - (jsp, servlet, frameworks)
7. Web services over webapp
8. Datstructure for Database
9. Presentation of content
    (HTML, CSS, Javascript, Frameworks)
10. CMS - wordpress, Adobe

Task 
   - Environment setup.
     1. mysql, postgresql, mongodb
     2. web engine (
          servlet jar, Spring jar,Eclipse)
           STS - download spring boot
     3. java 21 
      (jdk 8, jdk 21)
     4. React
Forest#321  Forest#123
Scott@123

populate 
CRUD

// get API  fetches collection or attributes
    or object// array
Display the course available.
    // get api fetches Set.
Display the no. of students enrolled
  in every course

Display the details of student who 
have enrolled for a particular course

SELECT * FROM COURSES;

SELECT COUNT(COURSEID) "COURSECOUNT" , COURSEID FROM ENROLLMENT GROUP BY COURSEID;


Class 3 :
----------

 Bean, Model, Entity,pojo, Loose coupling, Repository, 
 Collection, Java 8 - Lambda Expression, Functional Interface,
 Method Reference, Stream, Data Access Object, Reflection,
 Optional, Annotation.

  50- mcq  
  30- project  - Adobe+
  20 - Coding Question
  65% - 55%
-------------------------------------

   sir
   Dean - Interface 
         




int  insert (object)

int     update(object, int)
int    delete(int)

List<Object> fetch()

   Partial Implemention of an Interface methods is not allowed
   until java 8 Lambda Expression




import java.util.*; 
   
public class RotateDemo 
{ 
    public static void main(String[] args) 
    { 
        // Let us create a list of strings 
        List<String>  mylist = new ArrayList<String>(); 
        mylist.add("practice"); 
        mylist.add("code"); 
        mylist.add("quiz"); 
        mylist.add("geeksforgeeks"); 
   
        System.out.println("Original List : " + mylist); 
   
        // Here we are using rotate() method 
        // to rotate the element by distance 2 
        Collections.rotate(mylist, 1);
Collections.rotate(mylist, 2);
Collections.rotate(mylist, 3);
Collections.rotate(mylist, 4); 
    Collections.rotate(mylist, -1);
Collections.rotate(mylist, -2);
Collections.rotate(mylist, -3);
Collections.rotate(mylist, -4); 
   
        System.out.println("Rotated List: " + mylist); 
    } 
} 


Collection, Calender, date and time
-------------------------------------
Thursday






Method Reference for Consumer,Predicate, Comparator
------------------------------------------------------

Default method in interface:
----------------------------
Java8.

//public in same package
//backward compatibilty
// interface -> partial implementation is not allowed
default methodname() {

}
can i update interface x after 2 implementation?
interface x {
void m1();
void m2();
void m3();
default void m4(){//}
}

class C implements x {
  public void m1() {

   }
public void m2() {
  
  }
 public void m3() {

	}

 }
class D implements x {
  public void m1() {

   }
public void m2() {
  
  }
 public void m3() {

	}

 }
count the error.3



Functional Interface
____________________
Consumer, Producer, Predicate, Function

Functional interface -> 
one abstract method
n default method allowed
@FunctionInterface

Lamdba Expression 
------------------
1. easy for functional interface
2. solution for non-function interface.

Create a functional interface to check 
   1. two integers are same or not
   2. two doubles are same or not
   3. two strings are same or not
use only one Functional interface
3 reference 


  methods in functional interface 
  1. receives nothing returns nothing
  2. receives input returns nothing ----> Consumer
  3. receives nothing returns output----> producer/Supplier
  4. receives input returns output  ----> Function
  5. receives input returns boolean-----> Predicate

Utilize the project for API request
10 Collectors methods
Functional Interface

Method Generic in functional interface to apply
Stream
1000 items  1000 product Retails 
Consumer Functional Interface

Consumer<Generic> -> 
accept(parameter)

Supplier<Generic> -> get()

Function<Generic,Generic> -> apply(param1,param2)

Predicate<Generic> -> test(input)

Method Reference

Collectors

-----------------------------------
Create abstract class Shape 
and override method area()

Improvise Shape to Interface

Improvise Shape to Functional Interface

Replace area() with Function<> functional
interface

Abstract class and Interface 

A Class is group of attributes and business methods.
An abstract class is group of business methods.
An interface is a group of guidelines for business
methods.
An interface is a pure abstract class.
The best feature of java abstraction which facilitates
loose coupling.
A Functional Interface tightly loose coupling.



















Create a Custom Functional Interface to print random integer number (2digit)
-------------------------------------------------------------------









Question 1: Grouping By Length and Counting
Given a list of strings, write a Java 8 Stream program to group the strings by their length and count the number of strings in each group.


























     



