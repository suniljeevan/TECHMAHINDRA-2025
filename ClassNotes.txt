Techmahindra 
---------------
Backend
---------



1. Java acts as a middle Layer engine?

2. Front end-> backend
3. Database - mysql, mongodb, redis
4. API ( Restful )/ end points
    (HTTP methods)
5. API Testing  - Postman
6. Web engine - (jsp, servlet, frameworks)
7. Web services over webapp
8. Datstructure for Database
9. Presentation of content
    (HTML, CSS, Javascript, Frameworks)
10. CMS - wordpress, Adobe

Task 
   - Environment setup.
     1. mysql, postgresql, mongodb
     2. web engine (
          servlet jar, Spring jar,Eclipse)
           STS - download spring boot
     3. java 21 
      (jdk 8, jdk 21)
     4. React
Forest#321  Forest#123
Scott@123

populate 
CRUD

// get API  fetches collection or attributes
    or object// array
Display the course available.
    // get api fetches Set.
Display the no. of students enrolled
  in every course

Display the details of student who 
have enrolled for a particular course

SELECT * FROM COURSES;

SELECT COUNT(COURSEID) "COURSECOUNT" , COURSEID FROM ENROLLMENT GROUP BY COURSEID;


https://github.com/suniljeevan/TECHMAHINDRA-2025     

mysql> use techtest;
Database changed
mysql> select * from student;
+------+-----------+---------------------+-----------+----------------+
| sid  | sname     | email               | address   | admission_year |
+------+-----------+---------------------+-----------+----------------+
| 1001 | lakshman  | lakshman@gmail.com  | bengaluru |           2022 |
| 1002 | lakshman2 | lakshman2@gmail.com | bengaluru |           2022 |
| 1003 | lakshman3 | lakshman3@gmail.com | hyderabad |           2022 |
| 1004 | lakshman4 | lakshman4@gmail.com | hyderabad |           2022 |
| 1005 | lakshman5 | lakshman5@gmail.com | delhi     |           2022 |
+------+-----------+---------------------+-----------+----------------+
5 rows in set (0.00 sec)

mysql> select * from course;
+----------+------------+--------+------------+
| courseid | coursename | credit | ctype      |
+----------+------------+--------+------------+
| CSE1001  | JAVA       |      3 | INTEGRATED |
| CSE1002  | OS         |      4 | THEORY     |
| CSE1003  | DBMS       |      3 | THEORY     |
| CSE1004  | ADV.JAVA   |      3 | LAB        |
+----------+------------+--------+------------+
4 rows in set (0.00 sec)

mysql> select * from enrollment;
+--------+----------+
| studid | courseid |
+--------+----------+
| 1001   | cse1001  |
| 1001   | cse1002  |
| 1002   | cse1002  |
| 1002   | cse1003  |
| 1004   | cse1003  |
| 1003   | cse1004  |
+--------+----------+
6 rows in set (0.00 sec)

mysql> SELECT COUNT(COURSEID) "COURSECOUNT" , COURSEID FROM ENROLLMENT GROUP BY COURSEID;
+-------------+----------+
| COURSECOUNT | COURSEID |
+-------------+----------+
|           1 | cse1001  |
|           2 | cse1002  |
|           2 | cse1003  |
|           1 | cse1004  |
+-------------+----------+
4 rows in set (0.00 sec)

Display the details of student who 
have enrolled for a particular course

select * from student s,course c, enrollment e 
where c.courseid=e.courseid && 
e.studid=s.sid && c.coursename='java';
-------------------------------------------
post api to database
-------------------
insert a new student
input - single object-challenge- forming attributes to object
  insert into student values('1005','lakshman5',null,null);
  retuns no.of records affected.

  int insert(object) 

put api to database
-------------------
int update(String,object)

delete api
----------
int delete(String)



update the details of lakshman2 
        email, address, 

update student set email='lakshman@techmahindra.com', address='andhra pradesh' where sid='1002';

delete from student where sid='1001';

---------------------------------------------------------------

Java objects to represent tables
--------------------------------
pojo - plain old java object.
poji - plain old java Interface.
    Loose coupling
This is also called bean, entity, model, 
container- bean/enterprise java bean
MVC
framework
   @bean


course, student, enrollment,
UMS , student, 

-----------------------------------------
pojo
Student , Course, Enrollment

1. attributes represents column
2. getter and setter 
3. constructors
4. toString()
5. equals() and hashCode()
6. Serializable Interface (loose coupling)
   (Network transferable)
    by default servlet is assigning this feature
    @Bean

-----------------------------------------------------
create 1 project - sms
src-  package - model

ORM - Object Relational Mapping
      1. JDBC
      2. Hibernate
      3. JPA 
      4. Spring Data JPA    













